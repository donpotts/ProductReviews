@page "/category"
@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@using CsvHelper
@using System.Globalization
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Categories</PageTitle>

<div class="mb-3">
    <MudText Typo="Typo.h3">Categories</MudText>
</div>

<MudStack AlignItems="AlignItems.End" Class="mb-3">
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Primary" OnClick="@(e => OnAdd())">Add</MudButton>
</MudStack>

@if (_isImporting)
{
    <MudAlert Severity="Severity.Info" Class="mb-3" Icon="@Icons.Material.Filled.CloudUpload">
        <MudStack Direction="Orientation.Horizontal" AlignItems="AlignItems.Center" Spacing="2">
            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
            <MudText Typo="Typo.body1">Processing CSV import...</MudText>
        </MudStack>
    </MudAlert>
}

<MudDataGrid T="Category" @ref="grid" ServerData="(new Func<GridState<Category>, Task<GridData<Category>>>(ServerReload))" Filterable="true">
    <ToolBarContent>
         <MudText Typo="Typo.h6">Categories</MudText>
         <MudSpacer />
         <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true" ValueChanged="@(value => SearchChanged(value))"></MudTextField>
         <MudButton Color="Color.Primary" OnClick="ExportAllToCSV">Export CSV</MudButton>
         <MudFileUpload T="IBrowserFile" Accept=".csv" FilesChanged="ImportFromCSV" MaximumFileCount="1">
             <ActivatorContent>
                 <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Upload">
                     Import CSV
                 </MudButton>
             </ActivatorContent>
         </MudFileUpload>
         @if (_isImporting)
         {
             <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
         }
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x!.Id" Title="Id" />
        <PropertyColumn Property="x => x!.Name" Title="Name" />
        <PropertyColumn Property="x => x!.Description" Title="Description" />
        <PropertyColumn Property="x => x!.IconUrl" Title="IconUrl" />
        <PropertyColumn Property="x => x!.ParentCategoryId" Title="ParentCategoryId" />
        <PropertyColumn Property="x => x!.CreatedDate" Title="CreatedDate" />
        <PropertyColumn Property="x => x!.ModifiedDate" Title="ModifiedDate" />
        <PropertyColumn Property="x => x!.Notes" Title="Notes" />
        <PropertyColumn Property="x => x!.UserId" Title="UserId" />
        <TemplateColumn Title="Product" Sortable="false" Filterable="false">
            <CellTemplate>
                @string.Join(", ", context.Item.Product?.Select(x => x.Name?.ToString() ?? string.Empty) ?? [])
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Style="width: 50px;" StickyRight="true" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudStack Row="true">
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" title="Edit" OnClick="@(e => OnEdit(context.Item!))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" title="Delete" OnClick="@(e => OnDelete(context.Item!))" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Category" />
    </PagerContent>
</MudDataGrid>

<script>
    window.downloadFromBase64 = function (base64, filename) {
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        var byteCharacters = atob(base64);
        var byteNumbers = new Array(byteCharacters.length);
        for (var i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        var byteArray = new Uint8Array(byteNumbers);
        var blob = new Blob([byteArray], { type: "application/octet-stream" });
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = filename;
        a.click();
        window.URL.revokeObjectURL(url);
    };
</script>

@code {
    private MudDataGrid<Category>? grid;
    private string? _searchString;
    private bool _isImporting = false;
    private IBrowserFile? _csvFile;
    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    private async Task<GridData<Category>> ServerReload(GridState<Category> state)
    {
        var top = state.PageSize;
        var skip = state.Page * state.PageSize;
        var orderby = ODataHelpers.GetOrderBy(state.SortDefinitions);
        var filter = ODataHelpers.GetFilter(state.FilterDefinitions);

        AppService.ODataResult<Category>? result = null;

        try
        {
            if (_searchString?.Length > 0)
            {
               bool isNumeric = double.TryParse(_searchString, out _);
               bool isDateTime = DateTime.TryParse(_searchString, out _);

               if (isNumeric)
               {
                   filter = $"Id eq {_searchString} or UserId eq {_searchString}";
               }
               else if (isDateTime)
               {
                   filter = $"CreatedDate ge cast({_searchString},Edm.DateTimeOffset) or ModifiedDate ge cast({_searchString},Edm.DateTimeOffset)";
               }
               else
               {
                   filter = $"contains(tolower(Name), '{_searchString}') or contains(tolower(Description), '{_searchString}') or contains(tolower(IconUrl), '{_searchString}') or contains(tolower(ParentCategoryId), '{_searchString}') or contains(tolower(Notes), '{_searchString}') ";
               }
            }
            result = await AppService.ListCategoryODataAsync(top, skip, orderby, filter, true, "Product");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return new() { TotalItems = result?.Count ?? 0, Items = result?.Value ?? Enumerable.Empty<Category>() };
    }

    private async void OnAdd()
    {
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<AddCategory>("Add Category", dialogOptions).Result;

        if (result != null && !result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
        }
    }

    private async void OnEdit(Category record)
    {
        DialogParameters<UpdateCategory> dialogParams = new() { { x => x.Id, record.Id!.Value } };
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<UpdateCategory>("Update Category", dialogParams, dialogOptions).Result;

        if (result != null && !result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
        }
    }

    private async void OnDelete(Category record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this record?",
            "Delete",
            "Cancel");

        if (result.GetValueOrDefault(false))
        {
            try
            {
                await AppService.DeleteCategoryAsync(record.Id!.Value);
                await (grid?.ReloadServerData() ?? Task.CompletedTask);
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }
    
    private void SearchChanged(string Value)
    {
        if (Value.EndsWith("."))
        {
            return;
        }
        _searchString = Value.ToString().ToLower();
        try
        {
            if (_searchString.Length > 18)
            {
                DateTimeOffset dateTime = DateTime.Parse(_searchString);
                _searchString = dateTime.ToString("yyyy-MM-ddTHH:mm:ssK");
                //Console.WriteLine(_searchString);
            }
        }
        catch
        {
            return;
        }
        grid?.ReloadServerData();
    }

    private async Task ImportFromCSV(IBrowserFile file)
    {
        if (file == null) return;

        _csvFile = file;

        _isImporting = true;
        StateHasChanged();

        try
        {
            // Snackbar.Add($"Starting import of {_csvFile.Name}...", Severity.Info);
            
            // Read file content first
            var fileContent = new byte[_csvFile.Size];
            using (var stream = _csvFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024))
            {
                await stream.ReadAsync(fileContent, 0, (int)_csvFile.Size);
            }
            
            // Snackbar.Add($"File read successfully ({fileContent.Length} bytes)", Severity.Info);
            
            // Now parse the CSV from the byte array
            using var memoryStream = new MemoryStream(fileContent);
            using var reader = new StreamReader(memoryStream);
            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
            
            csv.Context.Configuration.HeaderValidated = null;
            csv.Context.Configuration.MissingFieldFound = null;

            var categories = new List<Category>();
            await csv.ReadAsync();
            csv.ReadHeader();
            
            while (await csv.ReadAsync())
            {
                var category = new Category();
                
                category.Name = GetFieldValue(csv, "name") ?? GetFieldValue(csv, "Name");
                category.Description = GetFieldValue(csv, "description") ?? GetFieldValue(csv, "Description");
                category.IconUrl = GetFieldValue(csv, "iconurl") ?? GetFieldValue(csv, "IconUrl");
                category.ParentCategoryId = GetFieldValue(csv, "parentcategoryid") ?? GetFieldValue(csv, "ParentCategoryId");
                category.Notes = GetFieldValue(csv, "notes") ?? GetFieldValue(csv, "Notes");
                
                var userIdStr = GetFieldValue(csv, "userid") ?? GetFieldValue(csv, "UserId");
                if (!string.IsNullOrWhiteSpace(userIdStr) && long.TryParse(userIdStr, out var userId))
                {
                    category.UserId = userId;
                }

                categories.Add(category);
            }

            if (categories.Any())
            {
                var response = await AppService.BulkUpsertCategoryAsync(categories);
                if (response != null)
                {
                    var jsonElement = (JsonElement)response;
                    var success = jsonElement.GetProperty("success").GetBoolean();
                    var processedCount = jsonElement.GetProperty("processedCount").GetInt32();
                    var addedCount = jsonElement.GetProperty("addedCount").GetInt32();
                    var updatedCount = jsonElement.GetProperty("updatedCount").GetInt32();
                    
                    if (success)
                    {
                        Snackbar.Add($"Import successful: {processedCount} processed, {addedCount} added, {updatedCount} updated", Severity.Success);
                        await (grid?.ReloadServerData() ?? Task.CompletedTask);
                    }
                    else
                    {
                        Snackbar.Add("Import failed", Severity.Error);
                    }
                }
            }
            else
            {
                Snackbar.Add("No valid categories found in CSV", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error importing CSV: {ex.Message}", Severity.Error);
            // Console.WriteLine($"CSV Import Error: {ex}");
            
            // Also show inner exception if available
            if (ex.InnerException != null)
            {
                Snackbar.Add($"Inner error: {ex.InnerException.Message}", Severity.Error);
                // Console.WriteLine($"Inner Exception: {ex.InnerException}");
            }
        }
        finally
        {
            _isImporting = false;
            StateHasChanged();
        }
    }

    private string? GetFieldValue(CsvReader csv, string fieldName)
    {
        try
        {
            return csv.GetField(fieldName);
        }
        catch
        {
            return null;
        }
    }

    private async Task ExportAllToCSV()
    {
        AppService.ODataResult<Category>? result = null;

        try
        {
            // Fetch all data from the OData service without any filters or restrictions
            result = await AppService.ListCategoryODataAsync(null, null, null, null, true, "Product");

            if (result != null && result?.Value != null)
            {
                var ar = result?.Value.ToList().Select(x => new
                {
                        x.Id,
    x.Name,
    x.Description,
    x.IconUrl,
    x.ParentCategoryId,
    x.CreatedDate,
    x.ModifiedDate,
    x.Notes,
    x.UserId,
Product = string.Join(", ", x.Product?.Select(x => x.Name?.ToString() ?? string.Empty) ?? []),

                });

                using var memoryStream = new MemoryStream();
                using (var writer = new StreamWriter(memoryStream))
                using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
                {
                    csv.WriteRecords(ar); // use CSVHelper to write the records to the CSV file
                }
                // Convert MemoryStream to ByteArray
                var byteArray = memoryStream.ToArray();

                // Convert ByteArray to Base64String
                var base64 = Convert.ToBase64String(byteArray);

                // Trigger file download
                await JSRuntime.InvokeVoidAsync("downloadFromBase64", base64, "Category_"+ System.DateTime.Now.ToString("yyyyMMddHHmmss") +".csv");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
