@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@using AppProduct.Shared.Models

<EditForm Model="@record" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.RateReview" Class="mr-2" />
                Add Product Review
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudStack Spacing="4" Style="min-width: 500px;">
                <!-- Product Selection -->
                <MudSelect T="long?" @bind-Value="record.ProductId" For="@(() => record.ProductId)" 
                          Label="Select Product" Required="true" Placeholder="Choose a product to review">
                    @if (products != null)
                    {
                        @foreach (var product in products)
                        {
                            <MudSelectItem Value="@product.Id">@product.Name</MudSelectItem>
                        }
                    }
                </MudSelect>

                <!-- Customer Information -->
                <MudTextField @bind-Value="record.CustomerName" For="@(() => record.CustomerName)" 
                             Label="Your Name" Required="true" Placeholder="Enter your full name" />
                
                <MudTextField @bind-Value="record.CustomerEmail" For="@(() => record.CustomerEmail)" 
                             Label="Email Address" Required="true" InputType="InputType.Email" 
                             Placeholder="your.email@example.com" />

                <!-- Star Rating -->
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudText>Rating: <MudText Typo="Typo.caption" Color="Color.Error" Style="display: inline;">*</MudText></MudText>
                    <StarRating @bind-Value="ratingValue" Size="Size.Medium" ShowRatingText="true" />
                </MudStack>
                
                <MudTextField @bind-Value="record.Title" For="@(() => record.Title)" 
                             Label="Review Title" Placeholder="Summarize your experience" />
                
                <MudTextField @bind-Value="record.ReviewText" For="@(() => record.ReviewText)" 
                             Label="Your Review" Lines="4" Required="true"
                             Placeholder="Share your thoughts about this product..." />

                <MudCheckBox @bind-Value="record.IsVerifiedPurchase" For="@(() => record.IsVerifiedPurchase)" 
                            Label="I am a verified purchaser of this product" Color="Color.Success" />
            </MudStack>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel" Variant="Variant.Text">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" 
                      StartIcon="@Icons.Material.Filled.Save" Disabled="@(!IsFormValid)">Add Review</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private ProductReview record = new();
    private List<Product>? products;
    private decimal? ratingValue;

    // Form validation helper
    private bool IsFormValid => 
        record.ProductId.HasValue && 
        !string.IsNullOrWhiteSpace(record.CustomerName) && 
        !string.IsNullOrWhiteSpace(record.CustomerEmail) && 
        !string.IsNullOrWhiteSpace(record.ReviewText) && 
        ratingValue.HasValue;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            // Set default values
            var now = DateTime.Now;
            record.ReviewDate = now;
            record.CreatedDate = now;
            record.ModifiedDate = now;
            record.HelpfulVotes = 0;
            
            // Load products for dropdown
            var productArray = await AppService.ListProductAsync();
            products = productArray?.ToList();
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        try
        {
            // Set the rating from the star component
            record.Rating = ratingValue;
            
            // Ensure dates are set
            var now = DateTime.Now;
            record.ReviewDate ??= now;
            record.CreatedDate ??= now;
            record.ModifiedDate = now;
            
            await AppService.InsertProductReviewAsync(record);
            Snackbar.Add("Review added successfully!", Severity.Success);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding review: {ex.Message}", Severity.Error);
        }
    }
}
